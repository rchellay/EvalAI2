"""
Django settings for temp_config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-sr+j3au1z1t+%602^k9ym*6&5r2jbogrn5ha$pz!f(bhcazgs0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Hosts permitidos - Configuraci√≥n para producci√≥n y desarrollo
if DEBUG:
    # Desarrollo local
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']
else:
    # Producci√≥n en Render
    ALLOWED_HOSTS = [
        'evalai2.onrender.com',
        'www.evalai2.onrender.com',
    ]

# Detectar solicitudes HTTPS detr√°s de proxy (necesario para Render)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    
    # Local
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'core.admin_error_middleware.AdminErrorHandlerMiddleware',  # Middleware personalizado para admin
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

DATABASES = {
    'default': dj_database_url.parse(
        config('DATABASE_URL', default='postgresql://evalai_db_user:FslD10eI04bxQxwRGlZ5JsGCS8fdUG7I@dpg-d3q0ocm3jp1c738a137g-a.frankfurt-postgres.render.com/evalai_db')
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# CORS Configuration
if DEBUG:
    # Desarrollo: permitir todas las solicitudes locales
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Producci√≥n: dominios espec√≠ficos + desarrollo local
    CORS_ALLOWED_ORIGINS = [
        'https://evalai2.onrender.com',
        'https://www.evalai2.onrender.com',
        'https://eval-ai-2.vercel.app',
        'https://www.eval-ai-2.vercel.app',
        'http://localhost:5173',  # Permitir desarrollo local
        'http://127.0.0.1:5173',  # Permitir desarrollo local
    ]
    # Permitir tambi√©n dominios de Vercel din√°micamente
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.vercel\.app$",  # Cualquier subdominio de vercel.app
    ]
    CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOW_CREDENTIALS = True

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
from datetime import timedelta

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticatedOrReadOnly',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

# JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Configuraci√≥n adicional de CORS
CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT']
CORS_ALLOW_HEADERS = [
    'accept', 'accept-encoding', 'authorization', 'content-type',
    'dnt', 'origin', 'user-agent', 'x-csrftoken', 'x-requested-with',
]

# OpenRouter AI Configuration (Multi-model AI service)
OPENROUTER_API_KEY = config('OPENROUTER_API_KEY', default='')
OPENROUTER_BASE_URL = config('OPENROUTER_BASE_URL', default='https://openrouter.ai/api/v1')
OPENROUTER_TIMEOUT = config('OPENROUTER_TIMEOUT', default=60, cast=int)
OPENROUTER_CACHE_TTL = config('OPENROUTER_CACHE_TTL', default=86400, cast=int)

# Modelos espec√≠ficos para diferentes tareas
QWEN_MODEL = config('QWEN_MODEL', default='qwen/qwen3-235b-a22b:free')  # Principal para r√∫bricas
DEEPSEEK_MODEL = config('DEEPSEEK_MODEL', default='tngtech/deepseek-r1t2-chimera:free')  # An√°lisis y feedback
GLM_MODEL = config('GLM_MODEL', default='z-ai/glm-4.5-air:free')  # Tareas r√°pidas

# Google Cloud Vision OCR Configuration
GOOGLE_CLOUD_PROJECT_ID = config('GOOGLE_CLOUD_PROJECT_ID', default='evalai-education')
GOOGLE_CLOUD_CREDENTIALS_PATH = config('GOOGLE_CLOUD_CREDENTIALS_PATH', default=None)
GOOGLE_VISION_MAX_FILE_SIZE = config('GOOGLE_VISION_MAX_FILE_SIZE', default=20 * 1024 * 1024, cast=int)  # 20MB

# Auto-fix para tablas faltantes en deployment
try:
    from core.auto_fix_tables import verificar_y_crear_tablas
    verificar_y_crear_tablas()
except Exception as e:
    print(f"‚ö†Ô∏è  Error en auto-fix de tablas: {e}")

# CORRECCI√ìN EXTREMA DE BASE DE DATOS
try:
    from django.db import connection
    print("üî• EJECUTANDO CORRECCI√ìN EXTREMA DE BASE DE DATOS...")
    
    with connection.cursor() as cursor:
        # 1. Forzar creaci√≥n de columna 'course' en core_group
        try:
            cursor.execute("ALTER TABLE core_group ADD COLUMN course VARCHAR(50) DEFAULT '4t ESO'")
            print("‚úÖ Columna 'course' agregada a core_group")
        except Exception as e:
            if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                print("‚ö†Ô∏è  Columna 'course' ya existe en core_group")
            else:
                print(f"‚ùå Error con columna 'course': {e}")
        
        # 2. Forzar creaci√≥n de columna 'grupo_principal_id' en core_student
        try:
            cursor.execute("ALTER TABLE core_student ADD COLUMN grupo_principal_id INTEGER")
            print("‚úÖ Columna 'grupo_principal_id' agregada a core_student")
            
            # Asignar estudiantes existentes al primer grupo
            cursor.execute("SELECT id FROM core_group LIMIT 1")
            first_group = cursor.fetchone()
            if first_group:
                cursor.execute(f"UPDATE core_student SET grupo_principal_id = {first_group[0]} WHERE grupo_principal_id IS NULL")
                print(f"‚úÖ Estudiantes asignados al grupo {first_group[0]}")
                
                # Hacer NOT NULL
                cursor.execute("ALTER TABLE core_student ALTER COLUMN grupo_principal_id SET NOT NULL")
                print("‚úÖ Columna 'grupo_principal_id' marcada como NOT NULL")
        except Exception as e:
            if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                print("‚ö†Ô∏è  Columna 'grupo_principal_id' ya existe en core_student")
            else:
                print(f"‚ùå Error con columna 'grupo_principal_id': {e}")
        
        # 3. Forzar creaci√≥n de columna 'apellidos' en core_student
        try:
            cursor.execute("ALTER TABLE core_student ADD COLUMN apellidos VARCHAR(200) DEFAULT 'Sin Apellidos'")
            print("‚úÖ Columna 'apellidos' agregada a core_student")
        except Exception as e:
            if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                print("‚ö†Ô∏è  Columna 'apellidos' ya existe en core_student")
            else:
                print(f"‚ùå Error con columna 'apellidos': {e}")
        
        # 4. Forzar creaci√≥n de tabla core_student_subgrupos
        try:
            cursor.execute("""
                CREATE TABLE core_student_subgrupos (
                    id SERIAL PRIMARY KEY,
                    student_id INTEGER NOT NULL,
                    group_id INTEGER NOT NULL,
                    UNIQUE(student_id, group_id)
                )
            """)
            print("‚úÖ Tabla core_student_subgrupos creada")
        except Exception as e:
            if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                print("‚ö†Ô∏è  Tabla core_student_subgrupos ya existe")
            else:
                print(f"‚ùå Error con tabla core_student_subgrupos: {e}")
        
                # 5. Forzar creaci√≥n de tabla core_evaluation
                try:
                    cursor.execute("""
                        CREATE TABLE core_evaluation (
                            id SERIAL PRIMARY KEY,
                            student_id INTEGER NOT NULL,
                            subject_id INTEGER NOT NULL,
                            evaluator_id INTEGER NOT NULL,
                            score DECIMAL(5,2),
                            comment TEXT,
                            rubric_id INTEGER,
                            date DATE DEFAULT CURRENT_DATE,
                            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                        )
                    """)
                    print("‚úÖ Tabla core_evaluation creada")
                except Exception as e:
                    if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                        print("‚ö†Ô∏è  Tabla core_evaluation ya existe")
                        # Verificar si le falta la columna date
                        try:
                            cursor.execute("ALTER TABLE core_evaluation ADD COLUMN date DATE DEFAULT CURRENT_DATE")
                            print("‚úÖ Columna 'date' agregada a core_evaluation")
                        except Exception as date_error:
                            if "already exists" in str(date_error).lower() or "duplicate" in str(date_error).lower():
                                print("‚ö†Ô∏è  Columna 'date' ya existe en core_evaluation")
                            else:
                                print(f"‚ùå Error agregando columna 'date': {date_error}")
                    else:
                        print(f"‚ùå Error con tabla core_evaluation: {e}")
                
                # 6. Forzar creaci√≥n de tabla core_notification
                try:
                    cursor.execute("""
                        CREATE TABLE core_notification (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER NOT NULL,
                            title VARCHAR(200) NOT NULL,
                            message TEXT NOT NULL,
                            is_read BOOLEAN DEFAULT FALSE,
                            notification_type VARCHAR(50) DEFAULT 'info',
                            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                        )
                    """)
                    print("‚úÖ Tabla core_notification creada")
                except Exception as e:
                    if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                        print("‚ö†Ô∏è  Tabla core_notification ya existe")
                    else:
                        print(f"‚ùå Error con tabla core_notification: {e}")
                
                # 7. Forzar creaci√≥n de tabla core_objective
                try:
                    cursor.execute("""
                        CREATE TABLE core_objective (
                            id SERIAL PRIMARY KEY,
                            title VARCHAR(200) NOT NULL,
                            description TEXT,
                            student_id INTEGER,
                            subject_id INTEGER,
                            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                        )
                    """)
                    print("‚úÖ Tabla core_objective creada")
                except Exception as e:
                    if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                        print("‚ö†Ô∏è  Tabla core_objective ya existe")
                        # Agregar columna student_id si falta
                        try:
                            cursor.execute("ALTER TABLE core_objective ADD COLUMN student_id INTEGER")
                            print("‚úÖ Columna student_id agregada a core_objective")
                        except Exception as add_error:
                            if "already exists" in str(add_error).lower() or "duplicate" in str(add_error).lower():
                                print("‚ö†Ô∏è  Columna student_id ya existe en core_objective")
                            else:
                                print(f"‚ùå Error agregando student_id: {add_error}")
                    else:
                        print(f"‚ùå Error con tabla core_objective: {e}")
    
    print("üéâ CORRECCI√ìN EXTREMA COMPLETADA!")
    
except Exception as e:
    print(f"‚ùå Error en correcci√≥n extrema: {e}")

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}
