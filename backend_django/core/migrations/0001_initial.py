# Generated by Django 4.2.7 on 2025-10-26 17:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del grupo (ej: 4tA, 4tB)', max_length=200)),
                ('course', models.CharField(default='Sin especificar', help_text='Curso académico (ej: 4t ESO)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
                'ordering': ['course', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Rubric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Activa'), ('inactive', 'Inactiva'), ('draft', 'Borrador')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='RubricCriterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('weight', models.FloatField(default=25.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='core.rubric')),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='RubricLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('order', models.IntegerField(default=0)),
                ('color', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='core.rubriccriterion')),
            ],
            options={
                'ordering': ['-score'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_mostrado', models.CharField(blank=True, max_length=200)),
                ('centro_educativo', models.CharField(blank=True, max_length=300)),
                ('curso_periodo', models.CharField(blank=True, default='2024-2025', max_length=100)),
                ('idioma', models.CharField(choices=[('es', 'Español'), ('ca', 'Català'), ('en', 'English'), ('fr', 'Français')], default='es', max_length=10)),
                ('tema', models.CharField(choices=[('light', 'Claro'), ('dark', 'Oscuro'), ('system', 'Sistema')], default='light', max_length=20)),
                ('tamano_fuente', models.CharField(choices=[('small', 'Pequeña'), ('medium', 'Media'), ('large', 'Grande')], default='medium', max_length=20)),
                ('escala_ui', models.IntegerField(default=100)),
                ('color_principal', models.CharField(default='#4f46e5', max_length=7)),
                ('notif_email', models.BooleanField(default=True)),
                ('notif_in_app', models.BooleanField(default=True)),
                ('recordatorio_minutos', models.IntegerField(choices=[(5, '5 minutos'), (15, '15 minutos'), (30, '30 minutos'), (60, '1 hora')], default=15)),
                ('notif_evaluaciones_pendientes', models.BooleanField(default=True)),
                ('notif_informes_listos', models.BooleanField(default=True)),
                ('notif_asistencias', models.BooleanField(default=True)),
                ('auto_logout_minutos', models.IntegerField(choices=[(15, '15 minutos'), (30, '30 minutos'), (60, '1 hora')], default=30)),
                ('cifrar_datos', models.BooleanField(default=False)),
                ('consentimiento_ia', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuración de Usuario',
                'verbose_name_plural': 'Configuraciones de Usuarios',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('days', models.JSONField(default=list)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asignatura',
                'verbose_name_plural': 'Asignaturas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del estudiante', max_length=200)),
                ('apellidos', models.CharField(blank=True, default='', help_text='Apellidos del estudiante', max_length=255)),
                ('email', models.EmailField(help_text='Email único del estudiante', max_length=254, unique=True)),
                ('photo', models.FileField(blank=True, null=True, upload_to='students/')),
                ('attendance_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grupo_principal', models.ForeignKey(blank=True, default=None, help_text='Grupo principal del estudiante', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alumnos', to='core.group')),
                ('subgrupos', models.ManyToManyField(blank=True, help_text='Grupos adicionales donde participa el estudiante', related_name='subgrupos', to='core.group')),
            ],
            options={
                'verbose_name': 'Estudiante',
                'verbose_name_plural': 'Estudiantes',
                'ordering': ['grupo_principal__course', 'grupo_principal__name', 'apellidos', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RubricScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(blank=True)),
                ('evaluation_session_id', models.CharField(db_index=True, max_length=100)),
                ('evaluated_at', models.DateTimeField(auto_now_add=True)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.rubriccriterion')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to=settings.AUTH_USER_MODEL)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.rubriclevel')),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='core.rubric')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rubric_scores', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura donde se realizó la evaluación', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rubric_scores', to='core.subject')),
            ],
            options={
                'ordering': ['-evaluated_at'],
            },
        ),
        migrations.AddField(
            model_name='rubric',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rubrics', to='core.subject'),
        ),
        migrations.AddField(
            model_name='rubric',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rubrics', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título del objetivo', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descripción detallada del objetivo')),
                ('deadline', models.DateField(help_text='Fecha límite para lograr el objetivo')),
                ('status', models.CharField(choices=[('pendiente', 'Pendiente'), ('en_progreso', 'En Progreso'), ('logrado', 'Logrado'), ('cancelado', 'Cancelado')], default='pendiente', help_text='Estado actual del objetivo', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Usuario que creó el objetivo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_objectives', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Estudiante al que pertenece el objetivo', on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura relacionada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='core.subject')),
            ],
            options={
                'ordering': ['deadline', 'status'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la notificación', max_length=200)),
                ('message', models.TextField(help_text='Contenido de la notificación')),
                ('notification_type', models.CharField(choices=[('objective_reminder', 'Recordatorio de Objetivo'), ('evaluation_alert', 'Alerta de Evaluación'), ('system_alert', 'Alerta del Sistema'), ('achievement', 'Logro Desbloqueado')], default='system_alert', help_text='Tipo de notificación', max_length=50)),
                ('is_read', models.BooleanField(default=False, help_text='Si la notificación ha sido leída')),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='Fecha programada para enviar la notificación', null=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='Fecha cuando se envió', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipient', models.ForeignKey(help_text='Usuario que recibe la notificación', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('related_objective', models.ForeignKey(blank=True, help_text='Objetivo relacionado (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.objective')),
                ('related_student', models.ForeignKey(blank=True, help_text='Estudiante relacionado (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_notifications', to='core.student')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='group',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='groups', to='core.subject'),
        ),
        migrations.AddField(
            model_name='group',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_groups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Evidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la evidencia', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descripción de la evidencia')),
                ('file', models.FileField(help_text='Archivo adjunto', upload_to='evidences/')),
                ('file_type', models.CharField(blank=True, help_text='Tipo de archivo (imagen, pdf, audio, etc.)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(help_text='Estudiante al que pertenece la evidencia', on_delete=django.db.models.deletion.CASCADE, related_name='evidences', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura relacionada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evidences', to='core.subject')),
                ('uploaded_by', models.ForeignKey(help_text='Usuario que subió la evidencia', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_evidences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fecha de la evaluación')),
                ('score', models.FloatField(blank=True, help_text='Calificación (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('comment', models.TextField(blank=True, help_text='Comentarios sobre la evaluación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluator', models.ForeignKey(help_text='Profesor que realizó la evaluación', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='daily_evaluations', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Estudiante evaluado', on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura evaluada (null = evaluación general)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='core.subject')),
            ],
            options={
                'ordering': ['-date', 'student__name'],
            },
        ),
        migrations.CreateModel(
            name='CustomEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=300)),
                ('descripcion', models.TextField(blank=True)),
                ('fecha', models.DateField()),
                ('hora_inicio', models.TimeField(blank=True, null=True)),
                ('hora_fin', models.TimeField(blank=True, null=True)),
                ('tipo', models.CharField(choices=[('normal', 'Normal'), ('no_lectivo', 'Día no lectivo'), ('reminder', 'Recordatorio'), ('meeting', 'Reunión')], default='normal', max_length=20)),
                ('color', models.CharField(default='#3b82f6', max_length=7)),
                ('todo_el_dia', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evento Personalizado',
                'verbose_name_plural': 'Eventos Personalizados',
                'ordering': ['-fecha', '-hora_inicio'],
            },
        ),
        migrations.CreateModel(
            name='CorrectionEvidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título descriptivo de la corrección', max_length=200)),
                ('original_text', models.TextField(help_text='Texto original del estudiante')),
                ('corrected_text', models.TextField(help_text='Texto después de la corrección')),
                ('correction_type', models.CharField(choices=[('texto', 'Corrección de Texto'), ('ocr', 'Corrección OCR'), ('mixto', 'Corrección Mixta')], default='texto', help_text='Tipo de corrección realizada', max_length=20)),
                ('language_tool_matches', models.JSONField(default=list, help_text='Errores detectados por LanguageTool')),
                ('ocr_info', models.JSONField(blank=True, default=dict, help_text='Información del OCR si aplica', null=True)),
                ('statistics', models.JSONField(default=dict, help_text='Estadísticas del texto (palabras, caracteres, etc.)')),
                ('original_image', models.FileField(blank=True, help_text='Imagen original si es corrección OCR', null=True, upload_to='corrections/images/')),
                ('status', models.CharField(choices=[('pendiente', 'Pendiente de Revisión'), ('revisada', 'Revisada'), ('aprobada', 'Aprobada'), ('necesita_mejora', 'Necesita Mejora')], default='pendiente', help_text='Estado actual de la corrección', max_length=20)),
                ('teacher_feedback', models.TextField(blank=True, help_text='Comentarios adicionales del profesor')),
                ('student_response', models.TextField(blank=True, help_text='Respuesta del estudiante a la corrección')),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Número de errores encontrados')),
                ('correction_score', models.FloatField(blank=True, help_text='Puntuación de calidad de la corrección (0-10)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('student', models.ForeignKey(help_text='Estudiante al que pertenece la corrección', on_delete=django.db.models.deletion.CASCADE, related_name='correction_evidences', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura relacionada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='correction_evidences', to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Profesor que realizó la corrección', on_delete=django.db.models.deletion.CASCADE, related_name='correction_evidences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evidencia de Corrección',
                'verbose_name_plural': 'Evidencias de Corrección',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura relacionada (opcional para comentarios generales)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='core.subject')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('custom', 'Personalizado'), ('non_lective', 'Día no lectivo'), ('exam', 'Examen'), ('meeting', 'Reunión'), ('holiday', 'Festivo')], default='custom', max_length=20)),
                ('color', models.CharField(default='#10B981', max_length=7)),
                ('all_day', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_events', to='core.subject')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fecha del registro de asistencia')),
                ('status', models.CharField(choices=[('presente', 'Presente'), ('ausente', 'Ausente'), ('tarde', 'Tarde')], help_text='Estado de asistencia: presente, ausente o tarde', max_length=10)),
                ('comment', models.TextField(blank=True, help_text='Comentario opcional sobre la asistencia', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_by', models.ForeignKey(help_text='Usuario que registró la asistencia', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_attendances', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Estudiante al que se registra la asistencia', on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core.student')),
                ('subject', models.ForeignKey(help_text='Asignatura en la que se toma asistencia', on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core.subject')),
            ],
            options={
                'ordering': ['-date', 'student__name'],
            },
        ),
        migrations.CreateModel(
            name='SelfEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='Puntuación de 1 a 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Comentario de la autoevaluación')),
                ('evaluation_type', models.CharField(choices=[('autoevaluacion', 'Autoevaluación'), ('coevaluacion', 'Coevaluación')], default='autoevaluacion', help_text='Tipo de evaluación', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(help_text='Estudiante que realiza la autoevaluación', on_delete=django.db.models.deletion.CASCADE, related_name='self_evaluations', to='core.student')),
                ('subject', models.ForeignKey(blank=True, help_text='Asignatura evaluada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='self_evaluations', to='core.subject')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['student', 'subject'], name='core_selfev_student_414f7b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='objective',
            index=models.Index(fields=['student', 'status'], name='core_object_student_babda7_idx'),
        ),
        migrations.AddIndex(
            model_name='objective',
            index=models.Index(fields=['deadline'], name='core_object_deadlin_73f295_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read'], name='core_notifi_recipie_aeffaf_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at'], name='core_notifi_schedul_340655_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='core_notifi_notific_cbfe88_idx'),
        ),
        migrations.AddIndex(
            model_name='evidence',
            index=models.Index(fields=['student', 'subject'], name='core_eviden_student_c09648_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['date', 'subject'], name='core_evalua_date_124ea0_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['student', 'date'], name='core_evalua_student_ada63f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='evaluation',
            unique_together={('student', 'subject', 'date')},
        ),
        migrations.AddIndex(
            model_name='correctionevidence',
            index=models.Index(fields=['student', 'created_at'], name='core_correc_student_16cb83_idx'),
        ),
        migrations.AddIndex(
            model_name='correctionevidence',
            index=models.Index(fields=['teacher', 'created_at'], name='core_correc_teacher_cee324_idx'),
        ),
        migrations.AddIndex(
            model_name='correctionevidence',
            index=models.Index(fields=['correction_type'], name='core_correc_correct_16191b_idx'),
        ),
        migrations.AddIndex(
            model_name='correctionevidence',
            index=models.Index(fields=['status'], name='core_correc_status_ad492e_idx'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['date', 'subject'], name='core_attend_date_a805a6_idx'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['student', 'date'], name='core_attend_student_931c39_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('student', 'subject', 'date')},
        ),
    ]
